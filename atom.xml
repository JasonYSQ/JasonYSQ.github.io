<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SevernHome</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yangshiqi.cn/"/>
  <updated>2017-12-14T02:11:41.533Z</updated>
  <id>http://www.yangshiqi.cn/</id>
  
  <author>
    <name>Severn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity Texture的设置</title>
    <link href="http://www.yangshiqi.cn/Texture.html"/>
    <id>http://www.yangshiqi.cn/Texture.html</id>
    <published>2017-12-13T10:55:20.000Z</published>
    <updated>2017-12-14T02:11:41.533Z</updated>
    
    <content type="html"><![CDATA[<p>按照咱们的老习惯，讲一下起因，拼UI的时候碰到下面这种情况：</p><a id="more"></a><p><img src="http://oxwng5pql.bkt.clouddn.com/Textrue_0.png" alt="Texture"></p><p>这是什么情况引起的呢，我们分析的话也就俩情况<br>1.美术给的资源不对<br>2.unity设置问题</p><p>按照程序的步骤，咱们先问了一下美术，是不是资源做的有问题，哈哈，然后美术做了一个新的，还是存在这个问题，所以这个锅还要自己背。<br>既然排除了第一个，那就咱们就找找unity的问题吧，最简单的方法是跟正确显示的图片进行比较，然后就发现了有一个选项不对，”Wrap Mode”，然后把这个选项改了一下，果然没了这个问题。但是不能仅限于此不是，咱们要看看为什么会产生这个原因。</p><p><img src="http://oxwng5pql.bkt.clouddn.com/Textrue_01.png" alt="Texture"></p><p>Wrap Mode的几个模式：<br>Repeat    Tiles the texture, creating a repeating pattern.<br>Clamp    Clamps the texture to the last pixel at the edge.<br>Mirror    Tiles the texture, creating a repeating pattern by mirroring it at every integer boundary.<br>MirrorOnce    Mirrors the texture once, then clamps to edge pixels.</p><p>//TODO</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照咱们的老习惯，讲一下起因，拼UI的时候碰到下面这种情况：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.yangshiqi.cn/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>C#转义字符</title>
    <link href="http://www.yangshiqi.cn/Char.html"/>
    <id>http://www.yangshiqi.cn/Char.html</id>
    <published>2017-12-05T07:35:04.000Z</published>
    <updated>2017-12-07T10:52:55.974Z</updated>
    
    <content type="html"><![CDATA[<p>编程中很多细节问题我们都要十分的注意，要不一个小小的字母错误就能引起程序的无法运行。<br>C#中转义字符分2中，一种是\,一种是@。</p><a id="more"></a><p>@符号在C#中有两个作用<br>作用1、在字符串的前面加@表示取消字符串中的转义<br>例如 string path=@”d:\root\subdir”;<br>作用2、如果用户定义的对象名和系统关键字冲突，可以在变量前面加入@<br>例如 string @Class=”this is a test”;</p><p>转义字符    字符名称<br>\’    单引号<br>\”    双引号<br>\    反斜杠<br>\0    空字符<br>\a    警报符<br>\b    退格<br>\f    换页<br>\n    换行<br>\r    回车<br>\t    水平制表<br>\v    垂直制表    </p><p>一 字符串中的用法<br>Verbatim字符串<br>    对于verbatim字符串，编译 器会严格按照原样对其进行解释。也就是说，即使这个字符串跨越多行，或是包含转义字符，编译器也将不予理会，即这些格式和转义符将按照原样输出。唯一例外的是引号，编译器必须将其转义，因为只有这样才能确定字符串的边界。<br>    Verbatim字符串的定义语法为以@符号开始，后面紧跟包含在引号中的字符串。例如：<br>string sample = @”Hello”;<br>string sample = @”Hello\tworld”; //生成Hello\tworld<br>以下是一个实用的示例：<br>string sample=@”C:\My Documents\sample.txt”;<br>//结果为：C:\My Documents\sample.txt，如同语句：string sample=”C:\My Documents\sample.txt”<br>    若想在Verbatim字符串内使用引号，必须使用附加的引号组将其转义。例如，生成字符串”Hi”的代码如下：<br>String s=@” “ “Hi”””; //注意：两边都有3个引号<br>上述代码将生成下列字符串：<br>“Hi”</p><p>字符@表示，其后的字符串是个“逐字字符串”(verbatim string)。<br>@只能对字符串常量作用。<br>1.用于文件路径<br>以下是引用片段：<br>string s_FilePath =”C:\Program Files\Microsoft.NET\test.txt”;<br>相当于<br>以下是引用片段：<br>string s_FilePath =@”C:\Program Files\Microsoft.NET\test.txt”;</p><p>2.用@表示的字符串能够跨越数行。用于在CS中写JS或SQL代码比较方便。<br>以下是引用片段：<br>string s_MultiRows = @”Line1<br>Line2<br>Line3”;<br>string s_JavaScript = @”<br>“; </p><p>二 标识符中的用法</p><p>在 C# 规范中, @ 可以作为标识符(类名、变量名、方法名等)的第一个字符，以允许C# 中保留关键字作为自己定义的标识符。<br>如<br>以下是引用片段：<br>class @class<br>{<br>public static void @static(bool @bool) {<br>if (@bool)<br>System.Console.WriteLine(“true”);<br>else<br>System.Console.WriteLine(“false”);<br>}<br>}<br>class Class1<br>{<br>static void M() {<br>clu0061ss.stu0061tic(true);<br>}<br>} </p><p>注意，@ 虽然出现在标识符中，但不作为标识符本身的一部分。<br>因此，以上示例，定义了一个名为 class 的类，并包含一个名为 static 的方法，以及一个参数名为了 bool 的形参。</p><p>这样，对于跨语言的移植带来了便利。因为，某个单词在 C# 中作为保留关键字，但是在其他语言中也许不是。</p><p>转自<br>作者 HanbGao 地址：<a href="https://www.cnblogs.com/muran/p/3174865.html" target="_blank" rel="external">https://www.cnblogs.com/muran/p/3174865.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程中很多细节问题我们都要十分的注意，要不一个小小的字母错误就能引起程序的无法运行。&lt;br&gt;C#中转义字符分2中，一种是\,一种是@。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://www.yangshiqi.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>算法第四版_二分法</title>
    <link href="http://www.yangshiqi.cn/BinarySearch.html"/>
    <id>http://www.yangshiqi.cn/BinarySearch.html</id>
    <published>2017-11-30T10:13:17.000Z</published>
    <updated>2017-12-07T10:53:00.245Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><a id="more"></a><p><img src="http://oxwng5pql.bkt.clouddn.com/%7BG%7D9FT%5D%60A%29JO$BK$5F%5DFP3Y.png" alt="命中查找" title="参考图片"></p><font color="gold" size="6">从这里我们可以了解二分查找适用于有序表，下面我们可以看一下用C#实现的二分查找</font><p><font color="#87CEFA" size="5">二分查找   递归</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">///&lt;param name=&quot;arr&quot;&gt;数组&lt;/param&gt;</div><div class="line">///&lt;param name=&quot;low&quot;&gt;开始索引 0&lt;/param&gt;</div><div class="line">///&lt;param name=&quot;high&quot;&gt;结束索引 &lt;/param&gt;</div><div class="line">///&lt;param name=&quot;key&quot;&gt;要查找的对象&lt;/param&gt;</div><div class="line">public static int BinarySearch(int[] arr, int low, int high, int key)</div><div class="line">&#123;</div><div class="line">    int mid = (low + high) / 2;</div><div class="line">    if (low &gt; high)</div><div class="line">        return -1;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        if (arr[mid] == key)</div><div class="line">            return mid;</div><div class="line">        else if (arr[mid] &gt; key)</div><div class="line">            return BinarySearch(arr, low, mid - 1, key);</div><div class="line">        else</div><div class="line">            return BinarySearch(arr, mid + 1, high, key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><font color="#87CEFA" size="5">二分查找   非递归</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">///&lt;param name=&quot;arr&quot;&gt;数组&lt;/param&gt;</div><div class="line">///&lt;param name=&quot;key&quot;&gt;要查找的对象&lt;/param&gt;</div><div class="line">public static int BinarySearch(int key,int[] arr)</div><div class="line">&#123;</div><div class="line">    int low = 0;</div><div class="line">    int max = arr.Length - 1;</div><div class="line">    while (low&lt;=max)</div><div class="line">    &#123;</div><div class="line">        int mid = low + (max - low) / 2;</div><div class="line">        if (key &lt;arr[ mid]) max = mid - 1;</div><div class="line">        else if (key &gt;arr[ mid]) low = mid + 1;</div><div class="line">        else return mid;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法第四版" scheme="http://www.yangshiqi.cn/tags/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
      <category term="基础知识" scheme="http://www.yangshiqi.cn/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo的使用</title>
    <link href="http://www.yangshiqi.cn/HexoUse.html"/>
    <id>http://www.yangshiqi.cn/HexoUse.html</id>
    <published>2017-10-16T07:37:43.000Z</published>
    <updated>2017-12-07T10:52:52.264Z</updated>
    
    <content type="html"><![CDATA[<p>hexo new “postName”       #新建文章<br>hexo new page “pageName”  #新建页面<br>hexo generate             #生成静态页面至public目录<br><a id="more"></a><br>hexo server               #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy               #部署到GitHub<br>hexo help                 #查看帮助<br>hexo version              #查看Hexo的版本</p><p><font color="gold" size="5">缩写 :</font><br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p><p><font color="gold" size="5">组合命令 :</font><br>hexo s -g #生成并本地预览<br>hexo d -g #生成并上传</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo new “postName”       #新建文章&lt;br&gt;hexo new page “pageName”  #新建页面&lt;br&gt;hexo generate             #生成静态页面至public目录&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.yangshiqi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello,World</title>
    <link href="http://www.yangshiqi.cn/Hello-World.html"/>
    <id>http://www.yangshiqi.cn/Hello-World.html</id>
    <published>2017-10-05T08:02:49.000Z</published>
    <updated>2017-12-07T10:52:48.138Z</updated>
    
    <content type="html"><![CDATA[<p>Unity板砖工，web乱搞协会成员，欢迎大家来到我的农田！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Unity板砖工，web乱搞协会成员，欢迎大家来到我的农田！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://www.yangshiqi.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
