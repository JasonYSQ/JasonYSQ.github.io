[{"title":"Unity Jenkins 自动部署","slug":"UnityJenkins自动部署","date":"2018-08-10T09:47:00.000Z","updated":"2018-08-10T09:47:50.953Z","comments":true,"path":"posts/UnityJenkins自动部署.html","link":"","permalink":"http://www.yangshiqi.cn/posts/UnityJenkins自动部署.html","excerpt":"","text":"//TODO","categories":[],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://www.yangshiqi.cn/tags/Unity/"}]},{"title":"MarkDown代码高亮","slug":"MarkDown代码高亮","date":"2018-08-10T09:38:43.000Z","updated":"2018-08-10T09:45:45.878Z","comments":true,"path":"posts/MarkDown代码高亮.html","link":"","permalink":"http://www.yangshiqi.cn/posts/MarkDown代码高亮.html","excerpt":"使用方法三个反引号+空格+key 1234 (```) key 代码段 (```)注意：括号为防止转义，括号无意义，实际用的话不要加括号","text":"使用方法三个反引号+空格+key 1234 (```) key 代码段 (```)注意：括号为防止转义，括号无意义，实际用的话不要加括号 显示： 1234Pubulic void Show()&#123; System.Console.WriteLine(Hello,World);&#125; 代码高亮的表格 语言 key 1C 1c ActionScript actionscript Apache apache AppleScript applescript AsciiDoc asciidoc AspectJ asciidoc AutoHotkey autohotkey AVR Assembler avrasm Axapta axapta Bash bash BrainFuck brainfuck Cap’n Proto capnproto Clojure REPL clojure Clojure clojure CMake cmake CoffeeScript coffeescript C++ cpp C# cs CSS css D d Dart d Delphi delphi Diff diff Django django DOS.bat dos Dust dust Elixir elixir ERB(Embedded Ruby) erb Erlang REPL erlang-repl Erlang erlang FIX fix F# fsharp G-code(ISO 6983) gcode Gherkin gherkin GLSL glsl Go go Gradle gradle Groovy groovy Haml haml Handlebars handlebars Haskell haskell Haxe haxe HTML html HTTP http Ini file ini Java java JavaScript javascript JSON json Lasso lasso Less less Lisp lisp LiveCode livecodeserver LiveScript livescript Lua lua Makefile makefile Markdown markdown Mathematica mathematica Matlab matlab MEL (Maya Embedded Language) mel Mercury mercury Mizar mizar Monkey monkey Nginx nginx Nimrod nimrod Nix nix NSIS nsis Objective C objectivec OCaml ocaml Oxygene oxygene Parser 3 parser3 Perl perl PHP php PowerShell powershell Processing processing Python’s profiler output profile Protocol Buffers protobuf Puppet puppet Python python Q q R r RenderMan RIB rib Roboconf roboconf RenderMan RSL rsl Ruby ruby Oracle Rules Language ruleslanguage Rust rust Scala scala Scheme scheme Scilab scilab SCSS scss Smali smali SmallTalk smalltalk SML sml SQL sql Stata stata STEP Part21(ISO 10303-21) step21 Stylus stylus Swift swift Tcl tcl Tex tex text text/plain Thrift thrift Twig twig TypeScript typescript Vala vala VB.NET vbnet VBScript in HTML vbscript-html VBScript vbscript Verilog verilog VHDL vhdl Vim Script vim Intel x86 Assembly x86asm XL xl XML xml YAML yml","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://www.yangshiqi.cn/tags/markdown/"}]},{"title":"Unity Texture的设置","slug":"UnityTexture","date":"2017-12-13T10:55:20.000Z","updated":"2018-08-10T06:47:50.109Z","comments":true,"path":"posts/UnityTexture.html","link":"","permalink":"http://www.yangshiqi.cn/posts/UnityTexture.html","excerpt":"按照咱们的老习惯，讲一下起因，拼UI的时候碰到下面这种情况：","text":"按照咱们的老习惯，讲一下起因，拼UI的时候碰到下面这种情况： 这是什么情况引起的呢，我们分析的话也就俩情况1.美术给的资源不对2.unity设置问题 Wrap Mode的几个模式：Repeat Tiles the texture, creating a repeating pattern.Clamp Clamps the texture to the last pixel at the edge.Mirror Tiles the texture, creating a repeating pattern by mirroring it at every integer boundary.MirrorOnce Mirrors the texture once, then clamps to edge pixels.","categories":[],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://www.yangshiqi.cn/tags/Unity/"}]},{"title":"C#转义字符","slug":"转义字符","date":"2017-12-05T07:35:04.000Z","updated":"2018-08-10T09:42:33.043Z","comments":true,"path":"posts/转义字符.html","link":"","permalink":"http://www.yangshiqi.cn/posts/转义字符.html","excerpt":"编程中很多细节问题我们都要十分的注意，要不一个小小的字母错误就能引起程序的无法运行。C#中转义字符分2中，一种是\\,一种是@。","text":"编程中很多细节问题我们都要十分的注意，要不一个小小的字母错误就能引起程序的无法运行。C#中转义字符分2中，一种是\\,一种是@。 @符号在C#中有两个作用作用1、在字符串的前面加@表示取消字符串中的转义例如 1string path=@\"d:\\root\\subdir\"; 作用2如果用户定义的对象名和系统关键字冲突，可以在变量前面加入@例如 1string @Class=\"this is a test\"; 转义字符字符名称 1234567891011\\' 单引号\\\" 双引号\\\\ 反斜杠\\0 空字符\\a 警报符\\b 退格\\f 换页\\n 换行\\r 回车\\t 水平制表\\v 垂直制表 一 字符串中的用法Verbatim字符串 对于verbatim字符串，编译 器会严格按照原样对其进行解释。也就是说，即使这个字符串跨越多行，或是包含转义字符，编译器也将不予理会，即这些格式和转义符将按照原样输出。唯一例外的是引号，编译器必须将其转义，因为只有这样才能确定字符串的边界。Verbatim字符串的定义语法为以@符号开始，后面紧跟包含在引号中的字符串。例如： 12string sample = @\"Hello\";string sample = @\"Hello\\tworld\"; //生成Hello\\tworld 以下是一个实用的示例： 1string sample=@\"C:\\My Documents\\sample.txt\"; //结果为：C:\\My Documents\\sample.txt，如同语句： 1string sample=\"C:\\\\My Documents\\\\sample.txt\" 若想在Verbatim字符串内使用引号，必须使用附加的引号组将其转义。例如，生成字符串”Hi”的代码如下： 1string s=@\" \" \"Hi\"\"\"; //注意：两边都有3个引号上述代码将生成下列字符串：“Hi” 字符@表示，其后的字符串是个“逐字字符串”(verbatim string)。@只能对字符串常量作用。1.用于文件路径以下是引用片段： 1string s_FilePath =\"C:\\\\Program Files\\\\Microsoft.NET\\\\test.txt\"; 相当于以下是引用片段： 1string s_FilePath =@\"C:\\Program Files\\Microsoft.NET\\test.txt\"; 2.用@表示的字符串能够跨越数行。用于在CS中写JS或SQL代码比较方便。以下是引用片段： 12string s_MultiRows = @\"Line1 Line2 Line3\";string s_JavaScript = @\" \"; 二 标识符中的用法 在 C# 规范中, @ 可以作为标识符(类名、变量名、方法名等)的第一个字符，以允许C# 中保留关键字作为自己定义的标识符。如以下是引用片段： 1234567891011121314151617181920212223class @class&#123; public static void @static(bool @bool) &#123; if (@bool) &#123; System.Console.WriteLine(\"true\"); &#125; else &#123; System.Console.WriteLine(\"false\"); &#125; &#125;&#125;class Class1&#123; static void M() &#123; clu0061ss.stu0061tic(true); &#125;&#125; 注意，@ 虽然出现在标识符中，但不作为标识符本身的一部分。因此，以上示例，定义了一个名为 class 的类，并包含一个名为 static 的方法，以及一个参数名为了 bool 的形参。 这样，对于跨语言的移植带来了便利。因为，某个单词在 C# 中作为保留关键字，但是在其他语言中也许不是。","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"http://www.yangshiqi.cn/tags/C/"}]},{"title":"算法第四版_二分法","slug":"算法二分法","date":"2017-11-30T10:13:17.000Z","updated":"2018-08-10T07:25:42.481Z","comments":true,"path":"posts/算法二分法.html","link":"","permalink":"http://www.yangshiqi.cn/posts/算法二分法.html","excerpt":"二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。","text":"二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。","categories":[],"tags":[{"name":"算法第四版","slug":"算法第四版","permalink":"http://www.yangshiqi.cn/tags/算法第四版/"},{"name":"基础知识","slug":"基础知识","permalink":"http://www.yangshiqi.cn/tags/基础知识/"}]},{"title":"hexo的使用","slug":"Hexo使用方法","date":"2017-10-16T07:37:43.000Z","updated":"2018-08-10T06:47:40.323Z","comments":true,"path":"posts/Hexo使用方法.html","link":"","permalink":"http://www.yangshiqi.cn/posts/Hexo使用方法.html","excerpt":"hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录","text":"hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.yangshiqi.cn/tags/Hexo/"}]},{"title":"Hello,World","slug":"Hello-World","date":"2017-10-05T08:02:49.000Z","updated":"2018-08-10T06:45:09.521Z","comments":true,"path":"posts/Hello-World.html","link":"","permalink":"http://www.yangshiqi.cn/posts/Hello-World.html","excerpt":"","text":"Hello World！","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.yangshiqi.cn/tags/随笔/"}]}]