[{"title":"Unity Texture的设置","slug":"UnityTexture","date":"2017-12-13T10:55:20.000Z","updated":"2018-08-10T04:12:30.216Z","comments":true,"path":"UnityTexture.html","link":"","permalink":"http://www.yangshiqi.cn/UnityTexture.html","excerpt":"按照咱们的老习惯，讲一下起因，拼UI的时候碰到下面这种情况：","text":"按照咱们的老习惯，讲一下起因，拼UI的时候碰到下面这种情况： 这是什么情况引起的呢，我们分析的话也就俩情况1.美术给的资源不对2.unity设置问题 按照程序的步骤，咱们先问了一下美术，是不是资源做的有问题，哈哈，然后美术做了一个新的，还是存在这个问题，所以这个锅还要自己背。既然排除了第一个，那就咱们就找找unity的问题吧，最简单的方法是跟正确显示的图片进行比较，然后就发现了有一个选项不对，”Wrap Mode”，然后把这个选项改了一下，果然没了这个问题。但是不能仅限于此不是，咱们要看看为什么会产生这个原因。 Wrap Mode的几个模式：Repeat Tiles the texture, creating a repeating pattern.Clamp Clamps the texture to the last pixel at the edge.Mirror Tiles the texture, creating a repeating pattern by mirroring it at every integer boundary.MirrorOnce Mirrors the texture once, then clamps to edge pixels. //TODO","categories":[],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://www.yangshiqi.cn/tags/Unity/"}]},{"title":"C#转义字符","slug":"转义字符","date":"2017-12-05T07:35:04.000Z","updated":"2018-08-10T04:12:12.687Z","comments":true,"path":"转义字符.html","link":"","permalink":"http://www.yangshiqi.cn/转义字符.html","excerpt":"编程中很多细节问题我们都要十分的注意，要不一个小小的字母错误就能引起程序的无法运行。C#中转义字符分2中，一种是\\,一种是@。","text":"编程中很多细节问题我们都要十分的注意，要不一个小小的字母错误就能引起程序的无法运行。C#中转义字符分2中，一种是\\,一种是@。 @符号在C#中有两个作用作用1、在字符串的前面加@表示取消字符串中的转义例如 string path=@”d:\\root\\subdir”;作用2、如果用户定义的对象名和系统关键字冲突，可以在变量前面加入@例如 string @Class=”this is a test”; 转义字符 字符名称\\’ 单引号\\” 双引号\\ 反斜杠\\0 空字符\\a 警报符\\b 退格\\f 换页\\n 换行\\r 回车\\t 水平制表\\v 垂直制表 一 字符串中的用法Verbatim字符串 对于verbatim字符串，编译 器会严格按照原样对其进行解释。也就是说，即使这个字符串跨越多行，或是包含转义字符，编译器也将不予理会，即这些格式和转义符将按照原样输出。唯一例外的是引号，编译器必须将其转义，因为只有这样才能确定字符串的边界。 Verbatim字符串的定义语法为以@符号开始，后面紧跟包含在引号中的字符串。例如：string sample = @”Hello”;string sample = @”Hello\\tworld”; //生成Hello\\tworld以下是一个实用的示例：string sample=@”C:\\My Documents\\sample.txt”;//结果为：C:\\My Documents\\sample.txt，如同语句：string sample=”C:\\My Documents\\sample.txt” 若想在Verbatim字符串内使用引号，必须使用附加的引号组将其转义。例如，生成字符串”Hi”的代码如下：String s=@” “ “Hi”””; //注意：两边都有3个引号上述代码将生成下列字符串：“Hi” 字符@表示，其后的字符串是个“逐字字符串”(verbatim string)。@只能对字符串常量作用。1.用于文件路径以下是引用片段：string s_FilePath =”C:\\Program Files\\Microsoft.NET\\test.txt”;相当于以下是引用片段：string s_FilePath =@”C:\\Program Files\\Microsoft.NET\\test.txt”; 2.用@表示的字符串能够跨越数行。用于在CS中写JS或SQL代码比较方便。以下是引用片段：string s_MultiRows = @”Line1Line2Line3”;string s_JavaScript = @”“; 二 标识符中的用法 在 C# 规范中, @ 可以作为标识符(类名、变量名、方法名等)的第一个字符，以允许C# 中保留关键字作为自己定义的标识符。如以下是引用片段：class @class{public static void @static(bool @bool) {if (@bool)System.Console.WriteLine(“true”);elseSystem.Console.WriteLine(“false”);}}class Class1{static void M() {clu0061ss.stu0061tic(true);}} 注意，@ 虽然出现在标识符中，但不作为标识符本身的一部分。因此，以上示例，定义了一个名为 class 的类，并包含一个名为 static 的方法，以及一个参数名为了 bool 的形参。 这样，对于跨语言的移植带来了便利。因为，某个单词在 C# 中作为保留关键字，但是在其他语言中也许不是。","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"http://www.yangshiqi.cn/tags/C/"}]},{"title":"算法第四版_二分法","slug":"算法 二分法","date":"2017-11-30T10:13:17.000Z","updated":"2018-08-10T04:13:37.409Z","comments":true,"path":"算法 二分法.html","link":"","permalink":"http://www.yangshiqi.cn/算法 二分法.html","excerpt":"二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。","text":"二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。 从这里我们可以了解二分查找适用于有序表，下面我们可以看一下用C#实现的二分查找 二分查找 递归12345678910111213141516171819///&lt;param name=&quot;arr&quot;&gt;数组&lt;/param&gt;///&lt;param name=&quot;low&quot;&gt;开始索引 0&lt;/param&gt;///&lt;param name=&quot;high&quot;&gt;结束索引 &lt;/param&gt;///&lt;param name=&quot;key&quot;&gt;要查找的对象&lt;/param&gt;public static int BinarySearch(int[] arr, int low, int high, int key)&#123; int mid = (low + high) / 2; if (low &gt; high) return -1; else &#123; if (arr[mid] == key) return mid; else if (arr[mid] &gt; key) return BinarySearch(arr, low, mid - 1, key); else return BinarySearch(arr, mid + 1, high, key); &#125;&#125; 二分查找 非递归123456789101112131415///&lt;param name=&quot;arr&quot;&gt;数组&lt;/param&gt;///&lt;param name=&quot;key&quot;&gt;要查找的对象&lt;/param&gt;public static int BinarySearch(int key,int[] arr)&#123; int low = 0; int max = arr.Length - 1; while (low&lt;=max) &#123; int mid = low + (max - low) / 2; if (key &lt;arr[ mid]) max = mid - 1; else if (key &gt;arr[ mid]) low = mid + 1; else return mid; &#125; return -1;&#125;","categories":[],"tags":[{"name":"算法第四版","slug":"算法第四版","permalink":"http://www.yangshiqi.cn/tags/算法第四版/"},{"name":"基础知识","slug":"基础知识","permalink":"http://www.yangshiqi.cn/tags/基础知识/"}]},{"title":"hexo的使用","slug":"Hexo使用方法","date":"2017-10-16T07:37:43.000Z","updated":"2018-08-10T04:12:44.586Z","comments":true,"path":"Hexo使用方法.html","link":"","permalink":"http://www.yangshiqi.cn/Hexo使用方法.html","excerpt":"hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录","text":"hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 缩写 :hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令 :hexo s -g #生成并本地预览hexo d -g #生成并上传","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.yangshiqi.cn/tags/Hexo/"}]},{"title":"Hello,World","slug":"Hello-World","date":"2017-10-05T08:02:49.000Z","updated":"2018-08-10T04:12:57.421Z","comments":true,"path":"Hello-World.html","link":"","permalink":"http://www.yangshiqi.cn/Hello-World.html","excerpt":"","text":"Unity搬砖工，web乱搞协会成员，欢迎大家来到我的农田！","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://www.yangshiqi.cn/tags/随笔/"}]}]